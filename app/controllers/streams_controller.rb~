class StreamsController < ApplicationController
   @clients=Hash.new
   @streams=Array.new
   @boars=Boar.where(:active=>true)
   @hunters=Hunter.where(:active=>true)
   




#LinkedIn activity stream http_request
def stream
  
  
  
  #shot_time=Hash.new
  
  #@hunters.each{|hunter| shot_time[hunter.id=>(Shot.maximum(:created_at).where(:hunter_id=>hunter.id).to_i)]}
  shot_time=Shot.maximum(:created_at).to_i
  shot_time=shot_time*1000
  #raise shot_time.inspect
  
  Hunter.where(:active=>true).each{|hunter| 
  
  client = LinkedIn::Client.new(Apikey.first.token,Apikey.first.secret)
  client.authorize_from_access(hunter.token, hunter.secret)
  @clients[hunter.id]=client
  }
  
  @clients.each {|id, client|
  hunter= client.profile.first_name + " " +client.profile.last_name
  
  #raise client.network_updates.inspect
  client.network_updates(:type => 'CONN',:after => shot_time).updates.each {|update|
    connection_first=update.profile.first_name + " " + update.profile.last_name
      if (update.profile.connections)
         #raise update.profile.connections.length.inspect
         update.profile.connections.each {|connection|
         if (connection.headline)
           headline= connection.headline
           connection_second=connection.first_name + " " + connection.last_name
           comments="test"
           @boars.each{|boar| 
           #check if boar is shot
           #raise connection.headline.inspect
           if (headline.downcase.include? boar.title.downcase)
               #comments=connection.headline.downcase.gsub(boar.title.downcase,"<span class='hilite'>" + boar.title.downcase+"</span>")
               Shot.create!(:connection_first=>connection_first, :connection_second=> connection_second, :comments=>comments, :headline=>headline, :hunter=>hunter, :source=>"stream", :important=>false, :boar=>boar.title, :boar_id=>boar.id, :hunter_id=>id)
           end
           }
         end
         }   
    end
    } 
  }
  #render :nothing => true
  redirect_to shots_path
  end
 
 #searching LinkedIn
 def search
  flash[:notice] = "Query executed" + Time.now.to_s
  @clients=Array.new
  @boars=Boar.where(:active=>true)
  
  Hunter.where(:active=>true).each{|hunter| 
  client = LinkedIn::Client.new(Apikey.first.token,Apikey.first.secret)
  client.authorize_from_access(hunter.token, hunter.secret)
  @clients.push(client)}
  #raise @clients.length.inspect
  @clients.each {|client|
  #raise client.profile(:fields=>['first-name','last-name', 'headline','public-profile-url','id']).public_profile_url.inspect
                   @boars.each {|boar|
                     i=1
                     total_profiles = client.search(:company=>boar.title, :current_company=>true, :network=>"in").total
                     #to prevent exceptions
                     total_profiles = 100 unless total_profiles<100
                     while i<=total_profiles
                     client.search(:company=>boar.title, :network=>"in", :start=>1, :count=>10).profiles.each{|profile|
                     Shot.create!(:connection_first=>"undefined", :connection_second=> profile.first_name + " " + profile.last_name, :headline=> profile.headline, :hunter=>client.profile.first_name, :source=>"search", :important=>false, :boar=>boar.title, :boar_id=>boar.id)}
                     i=i+20
                     end
                     }
                 }
 flash[:notice] = "Query executed" + Time.now.to_s
 redirect_to shots_path
 #render :nothing => true
 end

#LinkedIn activity stream automate task
  
  def stream_rufus
  @clients=Hash.new
  #shot_time=Hash.new
  @streams=Array.new
  @boars=Boar.where(:active=>true)
  @hunters=Hunter.where(:active=>true)
  #@hunters.each{|hunter| shot_time[hunter.id=>(Shot.maximum(:created_at).where(:hunter_id=>hunter.id).to_i)]}
  shot_time=Shot.maximum(:created_at).to_i
  shot_time=shot_time*1000
  #raise shot_time.inspect
  
  Hunter.where(:active=>true).each{|hunter| 
  
  client = LinkedIn::Client.new(Apikey.first.token,Apikey.first.secret)
  client.authorize_from_access(hunter.token, hunter.secret)
  @clients[hunter.id]=client
  }
  
  @clients.each {|id, client|
  hunter= client.profile.first_name + " " +client.profile.last_name
  
  #raise client.network_updates.inspect
  client.network_updates(:type => 'CONN',:after => shot_time).updates.each {|update|
    connection_first=update.profile.first_name + " " +update.profile.last_name
      if (update.profile.connections)
         #raise update.profile.connections.length.inspect
         update.profile.connections.each {|connection|
         if (connection.headline)
           headline= connection.headline
           connection_second=connection.first_name + " " + connection.last_name
           comments="test"
           @boars.each{|boar| 
           #check if boar is shot
           #raise connection.headline.inspect
           if (headline.downcase.include? boar.title.downcase)
               #comments=connection.headline.downcase.gsub(boar.title.downcase,"<span class='hilite'>" + boar.title.downcase+"</span>")
               Shot.create!(:connection_first=>connection_first, :connection_second=> connection_second, :comments=>comments, :headline=>headline, :hunter=>hunter, :source=>"stream", :important=>false, :boar=>boar.title, :boar_id=>boar.id, :hunter_id=>id)
           end
           }
         end
         }   
    end
    } 
  }
  #render :nothing => true
  end
end  
