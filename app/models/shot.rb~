class Shot < ActiveRecord::Base
#pagination for displaying pages
 def self.pages(records_in_page, source)
   pages=Array.new
   (Shot.where(:source=>source).count/records_in_page).times {|i| pages.push(i+1)}
   return pages.drop(1)
 end

#creating array of all source filters
 def self.sources
   all_sources=Array.new()
   Shot.select(:source).group(:source).each {|source| all_sources.push(source.source)}
   return all_sources
 end

#task for streaming LinkedIn activity
def self.stream
  
  clients=Hunter.clients(Hunter.where(:active=>true))
  shot_time=Hunter.shot_time(Hunter.where(:active=>true))
  boars=Boar.where(:active=>true)
  
  #looping all clients
  clients.each {|id, client|
  mail_body=""
  hunter= client.profile.first_name + " " + client.profile.last_name
  client.network_updates(:type => 'CONN',:after => shot_time[id]).updates.each {|update|
  connection_first=update.profile.first_name + " " +update.profile.last_name
  connection_first_url=update.profile.public_profile_url    
      if (update.profile.connections)
         update.profile.connections.each {|connection|
           if /^(.+) at (.+)$/ =~connection.headline
             headline_company= /at (.+)$/.match(connection.headline)[1]
             headline_position= /^(.+) at/.match(connection.headline)[1]
             connection_second=connection.first_name + " " + connection.last_name
             connection_second_url=connection.public_profile_url
             comments=""
             boars.each{|boar| 
               #check if boar is shot. Company aliases are in the aliases field
               if Boar.wound?(boar, headline_company)
               Shot.create!(:connection_second_url=>connection_second_url, :connection_first_url=>connection_first_url, :connection_first=>connection_first, :connection_second=> connection_second, :comments=>comments, :headline=>headline_position, :hunter=>hunter, :source=>"stream", :important=>false, :boar=>headline_company, :boar_id=>boar.id, :hunter_id=>id)
               mail_body=mail_body+connection_first + " just connected to " + connection_second + ", who is " + headline_position + " at targeting company " + headline_company + "\n"
               end
              }
           end
         }   
      end
    } 
  UserMailer.shot_boar(Hunter.where(:id=>id).first, mail_body).deliver unless mail_body.length>20
  }
 end

def self.search
  hunters=Hunter.where(:active=>true)
  boars=Boar.where(:active=>true)
  hunters.each {|hunter|
      boars.each {|boar|
        
        aged_hunt = false
        aged_hunt = boar.searched_by.include? (hunter.id.to_s) unless boar.searched_by.nil?
        if not aged_hunt
           Boar.hunt(hunter, boar)
        end
        
                 }
        }       
 end
end
